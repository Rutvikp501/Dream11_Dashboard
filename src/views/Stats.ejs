<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>IPL 11</title>
<style>
    
     .container {
            max-width: 800px;
            margin: 0 auto;
        }
</style>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
</head>

<body style="background-color: #83ecff !important; ">
    <%- include('./partials/navbar.ejs') %>
    <div style=" max-width: 1000px;    margin: 0 auto;">
        <div style="margin-top: 45px; background-color: #fff; padding: 20px; border-radius: 10px;">
            
            <div id="chart"></div>
        </div>
    </div>
    <div style="max-width: 1000px; margin: 0 auto;">
        <div style="display: flex; justify-content: space-between;">
            <div style="width: calc(50% - 10px);">
                <div style="margin-top: 20px; background-color: #fff; padding: 20px; border-radius: 10px;">
                    <div id="chartPie"></div>
                </div>
            </div>
            <!-- <div style="width: calc(50% - 10px);">
                <div style="margin-top: 20px; background-color: #fff; padding: 20px; border-radius: 10px;">
                    <div id="Column_chart"></div>
                </div>
            </div>  -->
        </div>
    </div>

    <!-- <div id="chart"></div>

    <div id="chartPie"></div> -->

    <script>
        // Get MatchDetails data from server-side rendering
        const MatchDetails = <%- JSON.stringify(MatchDetails) %>;

        // Function to generate chart data
        function generateChartData() {
            const chartData = {};
            MatchDetails.forEach(match => {
                if (match.players) {
                    match.players.forEach(player => {
                        if (!chartData[player.name]) {
                            chartData[player.name] = [];
                        }
                        const lastTotal = chartData[player.name].length > 0 ? chartData[player.name][chartData[player.name].length - 1].y : 0;
                        chartData[player.name].push({
                            x: match.match, // Match name as x-axis
                            y: lastTotal + player.points || 0 // Cumulative points earned in the match as y-axis
                        });
                    });
                }
            });
            return Object.entries(chartData).map(([player, data]) => ({
                name: player,
                data: data
            }));
        }

        // Define chart options
        const options = {
            series: generateChartData(),
            chart: {
                type: 'line',
                height: 380,
                stacked: false,
            },
            dataLabels: {
                enabled: false
            },
            stroke: {
                width: [1, 1, 1, 1]
            },
            title: {
                text: 'Player Performance Chart',
                align: 'left',
                offsetX: 110
            },
            xaxis: {
                type: 'category',
                title: {
                    text: 'Match Name',
                },
            },
            yaxis: {
                title: {
                    text: 'Points Earned',
                },
            },
            tooltip: {
                shared: true,
                intersect: false,
                y: {
                    formatter: function (y) {
                        if (typeof y !== 'undefined') {
                            return y.toFixed(0) + ' points';
                        }
                        return y;
                    }
                }
            },
            markers: {
                size: 4 // Size of the data points
            }
        };

        // Render the chart
        const chart = new ApexCharts(document.querySelector("#chart"), options);
        chart.render();
    </script>

<script>
    // Define the series data
    const data = <%- JSON.stringify(MatchDetails) %>;
    var playerStats = {};

    // Iterate over the data to extract player names, points, and matches won
    if (Array.isArray(data)) { 
        data.forEach(function(entry) { 
            if (entry.players) {
                entry.players.forEach(function(player) { 
                    if (!playerStats[player.name]) {
                        playerStats[player.name] = {
                            totalPoints: 0,
                            matchesWon: 0,
                            highestPoints: 0
                        };
                    }
                    playerStats[player.name].totalPoints += player.points; // Accumulate total points
                    if (player.points >= playerStats[player.name].highestPoints) {
                        playerStats[player.name].highestPoints = player.points; // Update highest points for the player
                        if (player.points > playerStats[player.name].highestPoints) {
                            playerStats[player.name].matchesWon = 1; // Set matches won to 1 for the player if new highest points
                        } else {
                            playerStats[player.name].matchesWon++; // Increment matches won if points are equal (tie)
                        }
                    }
                }); 
            } 
        }); 
    }

    // Prepare pie chart data
    var pieChartData = {
        series: Object.values(playerStats).map(stats => stats.matchesWon),
        labels: Object.keys(playerStats)
    };

    // Define the chart options
    var chartPie_options = {
        series: pieChartData.series,
        chart: {
            width: 450,
            type: 'pie',
        },
        labels: pieChartData.labels.map((label, index) => `${label} (${Object.values(playerStats)[index].matchesWon} matches)`), // Append match count to labels
        responsive: [{
            breakpoint: 480,
            options: {
                chart: {
                    width: 200
                },
                legend: {
                    position: 'bottom'
                }
            }
        }]
    };

    // Render the pie chart
    var chartPie = new ApexCharts(document.querySelector("#chartPie"), chartPie_options);
    chartPie.render();
</script>



<!-- <script>
var playerNames = [];
var dataPoints = [];
if (Array.isArray(MatchDetails)) { 
    MatchDetails.forEach(function(entry) { 
        if (entry.players) {
            entry.players.forEach(function(player) { 
                if (!playerNames.includes(player.name)) {
                    playerNames.push(player.name);
                    var totalPoints = player.points;
                    dataPoints.push(totalPoints);
                } else {
                    var index = playerNames.indexOf(player.name);
                    dataPoints[index] += player.points;
                }
            }); 
        } 
    }); 
}

    var Column_chart = {
        series: [{
            name: 'Total Points',
            data: dataPoints
        }],
        chart: {
            height: 350,
            type: 'bar',
        },
        plotOptions: {
            bar: {
                borderRadius: 10,
                dataLabels: {
                    position: 'top', // top, center, bottom
                },
            }
        },
        dataLabels: {
            enabled: true,
            formatter: function (val) {
                return val + "%";
            },
            offsetY: -20,
            style: {
                fontSize: '12px',
                colors: ["#304758"]
            }
        },
        xaxis: {
            categories: playerNames,
            position: 'top',
            axisBorder: {
                show: false
            },
            axisTicks: {
                show: false
            },
            crosshairs: {
                fill: {
                    type: 'gradient',
                    gradient: {
                        colorFrom: '#D8E3F0',
                        colorTo: '#BED1E6',
                        stops: [0, 100],
                        opacityFrom: 0.4,
                        opacityTo: 0.5,
                    }
                }
            },
            tooltip: {
                enabled: true,
            }
        },
        yaxis: {
            axisBorder: {
                show: false
            },
            axisTicks: {
                show: false,
            },
            labels: {
                show: false,
                formatter: function (val) {
                    return val + "%";
                }
            }
        },
        title: {
            text: 'Player Performance',
            floating: true,
            offsetY: 330,
            align: 'center',
            style: {
                color: '#444'
            }
        }
    };

    // Render the chart
    var Column_chart = new ApexCharts(document.querySelector("#Column_chart"), Column_chart);
    Column_chart.render();
</script> -->




</body>
</html>
