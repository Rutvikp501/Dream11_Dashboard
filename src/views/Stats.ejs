<%- include('./partials/header.ejs') %>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
</head>
<body style="background-color: #fff !important;">
    <%- include('./partials/navbar.ejs') %>
    <h1>Player Performance Chart</h1>
    <!-- Container for the chart -->
   <div style="margin-top: 100px; background-color: #fff;" >

        <div id="chart"></div>
    </div> 
   <!-- <div style="margin-top: 100px; background-color: #fff;" >

    <div id="chartPie"></div>
    </div>  -->

    <!-- Embedding the MatchDetails data into the HTML -->
    <script>
        // Get MatchDetails data from server-side rendering
        const MatchDetails = <%- JSON.stringify(MatchDetails) %>;

        // Function to generate chart data
        function generateChartData() {
            const chartData = {};
            MatchDetails.forEach(match => {
                if (match.players) {
                    match.players.forEach(player => {
                        if (!chartData[player.name]) {
                            chartData[player.name] = [];
                        }
                        const lastTotal = chartData[player.name].length > 0 ? chartData[player.name][chartData[player.name].length - 1].y : 0;
                        chartData[player.name].push({
                            x: match.match, // Match name as x-axis
                            y: lastTotal + player.points || 0 // Cumulative points earned in the match as y-axis
                        });
                    });
                }
            });
            return Object.entries(chartData).map(([player, data]) => ({
                name: player,
                data: data
            }));
        }

        // Define chart options
        const options = {
            series: generateChartData(),
            chart: {
                type: 'line',
                height: 350,
                stacked: false,
            },
            dataLabels: {
                enabled: false
            },
            stroke: {
                width: [1, 1, 1, 1]
            },
            title: {
                text: 'Player Performance Chart',
                align: 'left',
                offsetX: 110
            },
            xaxis: {
                type: 'category',
                title: {
                    text: 'Match Name',
                },
            },
            yaxis: {
                title: {
                    text: 'Points Earned',
                },
            },
            tooltip: {
                shared: true,
                intersect: false,
                y: {
                    formatter: function (y) {
                        if (typeof y !== 'undefined') {
                            return y.toFixed(0) + ' points';
                        }
                        return y;
                    }
                }
            },
            markers: {
                size: 4 // Size of the data points
            }
        };

        // Render the chart
        const chart = new ApexCharts(document.querySelector("#chart"), options);
        chart.render();
    </script>

<script>
    // Define the series data
    const data = <%- JSON.stringify(MatchDetails) %>;
    var playerStats = {};

    // Iterate over the data to extract player names, points, and matches won
    if (Array.isArray(data)) { 
        data.forEach(function(entry) { 
            if (entry.players) {
                entry.players.forEach(function(player) { 
                    if (!playerStats[player.name]) {
                        playerStats[player.name] = {
                            totalPoints: 0,
                            matchesWon: 0,
                            highestPoints: 0
                        };
                    }
                    playerStats[player.name].totalPoints += player.points; // Accumulate total points
                    if (player.points > playerStats[player.name].highestPoints) {
                        playerStats[player.name].highestPoints = player.points; // Update highest points for the player
                        playerStats[player.name].matchesWon = 1; // Set matches won to 1 for the player
                    } else if (player.points === playerStats[player.name].highestPoints) {
                        playerStats[player.name].matchesWon++; // Increment matches won if points are equal (tie)
                    }
                }); 
            } 
        }); 
    } 

    // Prepare pie chart data
    var pieChartData = {
        series: Object.values(playerStats).map(stats => stats.totalPoints),
        labels: Object.keys(playerStats)
    };
console.log(pieChartData);
    // Define the chart options
    var chartPie_options = {
        series: pieChartData.series,
        chart: {
            width: 380,
            type: 'pie',
        },
        labels: pieChartData.labels.map((label, index) => `${label} (${Object.values(playerStats)[index].matchesWon} matches)`), // Append match count to labels
        responsive: [{
            breakpoint: 480,
            options: {
                chart: {
                    width: 200
                },
                legend: {
                    position: 'bottom'
                }
            }
        }]
    };

    // Render the pie chart
    var chartPie = new ApexCharts(document.querySelector("#chartPie"), chartPie_options);
    chartPie.render();
</script>





</body>
</html>
